pipeline {
    // agent {
    //     docker {
    //         image 'node:lts-buster-slim'
    //         args '-p 3004:3004'
    //     }
    // }
    // environment {
    //     CI = 'true'
    // }

    // stages {
    //     stage('Build') {
    //         steps {
    //             sh 'npm install'
    //         }
    //     }
    agent {
        docker {
            image 'node:lts-buster-slim'
            args '-u root -p 3004:3004'
        }
    }
    environment {
        NPM_CONFIG_PREFIX = "/root/.npm-global"
        npm_config_cache = "/root/.npm-cache"
        npm_config_userconfig = "/root/.npmrc"
        PATH = "/root/.npm-global/bin:$PATH"
        DOCKER_HUB_REPO = 'techino'
    }
    stages {
        stage('Install Docker') {
                    steps {
                        sh '''
                            apt-get update
                            apt-get install -y docker.io
                            systemctl start docker || true
                            systemctl enable docker || true
                        '''
                    }
                }
        stage('Pull Images') {
            steps {
                script {
                    docker.image('postgres:latest').pull()
                    docker.image('redis:latest').pull()
                    docker.image('mongo:latest').pull()
                    docker.image('mongo-express:latest').pull()
                }
            }
        }
        stage('Tag and Push Images') {
            steps {
                script {
                    docker.image('postgres:latest').tag("${DOCKER_HUB_REPO}/postgres:latest")
                    docker.image('redis:latest').tag("${DOCKER_HUB_REPO}/redis:latest")
                    docker.image('mongo:latest').tag("${DOCKER_HUB_REPO}/mongo:latest")
                    docker.image('mongo-express:latest').tag("${DOCKER_HUB_REPO}/mongo-express:latest")

                    docker.withRegistry('https://index.docker.io/v1/', 'docker-hub-credentials') {
                        docker.image("${DOCKER_HUB_REPO}/postgres:latest").push()
                        docker.image("${DOCKER_HUB_REPO}/redis:latest").push()
                        docker.image("${DOCKER_HUB_REPO}/mongo:latest").push()
                        docker.image("${DOCKER_HUB_REPO}/mongo-express:latest").push()
                    }
                }
            }
        }
        stage('Prepare Environment') {
            steps {
                sh '''
                    mkdir -p ${NPM_CONFIG_PREFIX}
                    mkdir -p ${npm_config_cache}
                    echo "prefix = ${NPM_CONFIG_PREFIX}" > ${npm_config_userconfig}
                '''
            }
        }
        stage('Clean Workspace') {
            steps {
                sh 'rm -rf node_modules'
                sh 'npm cache clean --force'
            }
        }
        stage('Install Dependencies') {
            steps {
                sh 'npm install'
            }
        }
        stage('Test') {
            steps {
                sh './jenkins/scripts/test.sh'
            }
        }
        stage('Deliver') {
            steps {
                sh './jenkins/scripts/deliver.sh'
                input message: 'Finished using the web site? (Click "Proceed" to continue)'
                sh './jenkins/scripts/kill.sh'
            }
        }
    }
}
